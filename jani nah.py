{"nbformat":4,"nbformat_minor":0,"metadata":
    {"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},
     "language_info":{"codemirror_mode":{"name":"ipython","version":3},
                      "file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python",
                      "pygments_lexer":"ipython3","version":"3.7.4"},
     "colab":{"name":"DNN_Scratch.ipynb","provenance":[],
              "collapsed_sections":["bJ117WTMMit3","o8giwYNODS8R","cXPE1m3NDXo5","EEtKQ2sjDbZz","ibxvgdOSDt7J",
                                    "xxaPhuVhDjTJ","T83ujLy5DyHw","qQHJV_5qD3rA","PXuyKuuOD9s4","tbTH3WBHEN34",
                                    "DmsLNZIxEDXZ","duDiiThyEcrY"],"toc_visible":true}},"cells":[{"cell_type":"markdown",
"metadata":{"id":"Poki-b5NCG7T"},"source":["# Importing libraries"]},{"cell_type":"code",
"metadata":{"id":"folhMXDpHNJ9","executionInfo":{"status":"ok","timestamp":1610032439964,"user_tz":-330,
"elapsed":2013,"user":{"displayName":"Siddhi Vinayak Tripathi",
"photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Uizs5aJxGEFpmAyQgkLTkobTJ4qotzvQmYYdnw=s64",
"userId":"14392076445379840955"}}},"source":["import numpy as np\n","import h5py\n",

   "import matplotlib.pyplot as plt\n","from scipy import ndimage\n","import scipy\n","from PIL import Image"],

    "execution_count":23,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bJ117WTMMit3"},"source":
    ["# Helper Functions\r\n","\r\n"]},{"cell_type":"markdown","metadata":{"id":"o8giwYNODS8R"},"source"
:["## Activation Functions"]},{"cell_type":"code","metadata":{"id":"sk91dQFlClP0"},"source":["def sigmoid(Z):"
  

   "Z -- numpy array of any shape\r\n","    \r\n","    Returns:\r\n","    A -- output of sigmoid(z), same shape as "

"Z\r\n","    cache -- returns Z as well, useful during backpropagation\r\n","    \"\"\"\r\n","    \r\n","    A = 1/(1+np.exp(-Z))\r\n","    cache = Z\r\n","    \r\n","    return A, cache\r\n","\r\n","def relu(Z):\r\n","    \"\"\"\r\n","    Implement the RELU function.\r\n","\r\n","    Arguments:\r\n","    Z -- Output of the linear layer, of any shape\r\n","\r\n","    Returns:\r\n","    A -- Post-activation parameter, of the same shape as Z\r\n","    cache -- a python dictionary containing \"A\" ; stored for computing the backward pass efficiently\r\n","    \"\"\"\r\n","    \r\n","    A = np.maximum(0,Z)\r\n","    \r\n","    assert(A.shape == Z.shape)\r\n","    \r\n","    cache = Z \r\n","    return A, cache\r\n","\r\n","\r\n","def relu_backward(dA, cache):\r\n","    \"\"\"\r\n","    Implement the backward propagation for a single RELU unit.\r\n","\r\n","    Arguments:\r\n","    dA -- post-activation gradient, of any shape\r\n","    cache -- 'Z' where we store for computing backward propagation efficiently\r\n","\r\n","    Returns:\r\n","    dZ -- Gradient of the cost with respect to Z\r\n","    \"\"\"\r\n","    \r\n","    Z = cache\r\n","    dZ = np.array(dA, copy=True) # just converting dz to a correct object.\r\n","    \r\n","    # When z <= 0, you should set dz to 0 as well. \r\n","    dZ[Z <= 0] = 0\r\n","    \r\n","    assert (dZ.shape == Z.shape)\r\n","    \r\n","    return dZ\r\n","\r\n","def sigmoid_backward(dA, cache):\r\n","    \"\"\"\r\n","    Implement the backward propagation for a single SIGMOID unit.\r\n","\r\n","    Arguments:\r\n","    dA -- post-activation gradient, of any shape\r\n","    cache -- 'Z' where we store for computing backward propagation efficiently\r\n","\r\n","    Returns:\r\n","    dZ -- Gradient of the cost with respect to Z\r\n","    \"\"\"\r\n","    \r\n","    Z = cache\r\n","    \r\n","    s = 1/(1+np.exp(-Z))\r\n","    dZ = dA * s * (1-s)\r\n","    \r\n","    assert (dZ.shape == Z.shape)\r\n","    \r\n","    return dZ"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cXPE1m3NDXo5"},"source":["## Loading Data"]},{"cell_type":"code","metadata":{"id":"teOoxQ7mCysC"},"source":["def load_data():\r\n","    train_dataset = h5py.File('train_catvnoncat.h5', \"r\")\r\n","    train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) # your train set features\r\n","    train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) # your train set labels\r\n","\r\n","    test_dataset = h5py.File('test_catvnoncat.h5', \"r\")\r\n","    test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) # your test set features\r\n","    test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) # your test set labels\r\n","\r\n","    classes = np.array(test_dataset[\"list_classes\"][:]) # the list of classes\r\n","    \r\n","    train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))\r\n","    test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))\r\n","    \r\n","    return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EEtKQ2sjDbZz"},"source":["## Initializes the parameters randomly as well as normalized."]},{"cell_type":"code","metadata":{"id":"7iyslvAAC2rB"},"source":["\r\n","def initialize_parameters_deep(layer_dims):\r\n","    \"\"\"\r\n","    Arguments:\r\n","    layer_dims -- python array (list) containing the dimensions of each layer in our network\r\n","    \r\n","    Returns:\r\n","    parameters -- python dictionary containing your parameters \"W1\", \"b1\", ..., \"WL\", \"bL\":\r\n","                    Wl -- weight matrix of shape (layer_dims[l], layer_dims[l-1])\r\n","                    bl -- bias vector of shape (layer_dims[l], 1)\r\n","    \"\"\"\r\n","    \r\n","    np.random.seed(1)\r\n","    parameters = {}\r\n","    L = len(layer_dims)            # number of layers in the network\r\n","\r\n","    for l in range(1, L):\r\n","        parameters['W' + str(l)] = np.random.randn(layer_dims[l], layer_dims[l-1]) / np.sqrt(layer_dims[l-1]) #*0.01\r\n","        parameters['b' + str(l)] = np.zeros((layer_dims[l], 1))\r\n","        \r\n","        assert(parameters['W' + str(l)].shape == (layer_dims[l], layer_dims[l-1]))\r\n","        assert(parameters['b' + str(l)].shape == (layer_dims[l], 1))\r\n","\r\n","        \r\n","    return parameters"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ibxvgdOSDt7J"},"source":["##Performs one step of forward propagation linearly"]},{"cell_type":"code","metadata":{"id":"QQ3qmWUyC8DJ"},"source":["\r\n","def linear_forward(A, W, b):\r\n","    \"\"\"\r\n","    Implement the linear part of a layer's forward propagation.\r\n","\r\n","    Arguments:\r\n","    A -- activations from previous layer (or input data): (size of previous layer, number of examples)\r\n","    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\r\n","    b -- bias vector, numpy array of shape (size of the current layer, 1)\r\n","\r\n","    Returns:\r\n","    Z -- the input of the activation function, also called pre-activation parameter \r\n","    cache -- a python dictionary containing \"A\", \"W\" and \"b\" ; stored for computing the backward pass efficiently\r\n","    \"\"\"\r\n","    \r\n","    Z = W.dot(A) + b\r\n","    \r\n","    assert(Z.shape == (W.shape[0], A.shape[1]))\r\n","    cache = (A, W, b)\r\n","    \r\n","    return Z, cache"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xxaPhuVhDjTJ"},"source":["##Applies the activation function to linear forward"]},{"cell_type":"code","metadata":{"id":"uyq1Ob-cC_-q"},"source":["def linear_activation_forward(A_prev, W, b, activation):\r\n","    \"\"\"\r\n","    Implement the forward propagation for the LINEAR->ACTIVATION layer\r\n","\r\n","    Arguments:\r\n","    A_prev -- activations from previous layer (or input data): (size of previous layer, number of examples)\r\n","    W -- weights matrix: numpy array of shape (size of current layer, size of previous layer)\r\n","    b -- bias vector, numpy array of shape (size of the current layer, 1)\r\n","    activation -- the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\r\n","\r\n","    Returns:\r\n","    A -- the output of the activation function, also called the post-activation value \r\n","    cache -- a python dictionary containing \"linear_cache\" and \"activation_cache\";\r\n","             stored for computing the backward pass efficiently\r\n","    \"\"\"\r\n","    \r\n","    if activation == \"sigmoid\":\r\n","        # Inputs: \"A_prev, W, b\". Outputs: \"A, activation_cache\".\r\n","        Z, linear_cache = linear_forward(A_prev, W, b)\r\n","        A, activation_cache = sigmoid(Z)\r\n","    \r\n","    elif activation == \"relu\":\r\n","        # Inputs: \"A_prev, W, b\". Outputs: \"A, activation_cache\".\r\n","        Z, linear_cache = linear_forward(A_prev, W, b)\r\n","        A, activation_cache = relu(Z)\r\n","    \r\n","    assert (A.shape == (W.shape[0], A_prev.shape[1]))\r\n","    cache = (linear_cache, activation_cache)\r\n","\r\n","    return A, cache"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T83ujLy5DyHw"},"source":["## Forward Pass for L layers"]},{"cell_type":"code","metadata":{"id":"HKwkLsJ8DCsp"},"source":["def L_model_forward(X, parameters):\r\n","    \"\"\"\r\n","    Implement forward propagation for the [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID computation\r\n","    \r\n","    Arguments:\r\n","    X -- data, numpy array of shape (input size, number of examples)\r\n","    parameters -- output of initialize_parameters_deep()\r\n","    \r\n","    Returns:\r\n","    AL -- last post-activation value\r\n","    caches -- list of caches containing:\r\n","                every cache of linear_relu_forward() (there are L-1 of them, indexed from 0 to L-2)\r\n","                the cache of linear_sigmoid_forward() (there is one, indexed L-1)\r\n","    \"\"\"\r\n","\r\n","    caches = []\r\n","    A = X\r\n","    L = len(parameters) // 2                  # number of layers in the neural network\r\n","    \r\n","    # Implement [LINEAR -> RELU]*(L-1). Add \"cache\" to the \"caches\" list.\r\n","    for l in range(1, L):\r\n","        A_prev = A \r\n","        A, cache = linear_activation_forward(A_prev, parameters['W' + str(l)], parameters['b' + str(l)], activation = \"relu\")\r\n","        caches.append(cache)\r\n","    \r\n","    # Implement LINEAR -> SIGMOID. Add \"cache\" to the \"caches\" list.\r\n","    AL, cache = linear_activation_forward(A, parameters['W' + str(L)], parameters['b' + str(L)], activation = \"sigmoid\")\r\n","    caches.append(cache)\r\n","    \r\n","    assert(AL.shape == (1,X.shape[1]))\r\n","            \r\n","    return AL, caches"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qQHJV_5qD3rA"},"source":["## A single backpass"]},{"cell_type":"code","metadata":{"id":"sRBNZDN1DH1B"},"source":["#The backprop\r\n","def linear_backward(dZ, cache):\r\n","    \"\"\"\r\n","    Implement the linear portion of backward propagation for a single layer (layer l)\r\n","\r\n","    Arguments:\r\n","    dZ -- Gradient of the cost with respect to the linear output (of current layer l)\r\n","    cache -- tuple of values (A_prev, W, b) coming from the forward propagation in the current layer\r\n","\r\n","    Returns:\r\n","    dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev\r\n","    dW -- Gradient of the cost with respect to W (current layer l), same shape as W\r\n","    db -- Gradient of the cost with respect to b (current layer l), same shape as b\r\n","    \"\"\"\r\n","    A_prev, W, b = cache\r\n","    m = A_prev.shape[1]\r\n","\r\n","    dW = 1./m * np.dot(dZ,A_prev.T)\r\n","    db = 1./m * np.sum(dZ, axis = 1, keepdims = True)\r\n","    dA_prev = np.dot(W.T,dZ)\r\n","    \r\n","    assert (dA_prev.shape == A_prev.shape)\r\n","    assert (dW.shape == W.shape)\r\n","    assert (db.shape == b.shape)\r\n","    \r\n","    return dA_prev, dW, db"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PXuyKuuOD9s4"},"source":["## Backprop with activation applied"]},{"cell_type":"code","metadata":{"id":"466E8jaNDJgx"},"source":["#Backprop wid activation\r\n","def linear_activation_backward(dA, cache, activation):\r\n","    \"\"\"\r\n","    Implement the backward propagation for the LINEAR->ACTIVATION layer.\r\n","    \r\n","    Arguments:\r\n","    dA -- post-activation gradient for current layer l \r\n","    cache -- tuple of values (linear_cache, activation_cache) we store for computing backward propagation efficiently\r\n","    activation -- the activation to be used in this layer, stored as a text string: \"sigmoid\" or \"relu\"\r\n","    \r\n","    Returns:\r\n","    dA_prev -- Gradient of the cost with respect to the activation (of the previous layer l-1), same shape as A_prev\r\n","    dW -- Gradient of the cost with respect to W (current layer l), same shape as W\r\n","    db -- Gradient of the cost with respect to b (current layer l), same shape as b\r\n","    \"\"\"\r\n","    linear_cache, activation_cache = cache\r\n","    \r\n","    if activation == \"relu\":\r\n","        dZ = relu_backward(dA, activation_cache)\r\n","        dA_prev, dW, db = linear_backward(dZ, linear_cache)\r\n","        \r\n","    elif activation == \"sigmoid\":\r\n","        dZ = sigmoid_backward(dA, activation_cache)\r\n","        dA_prev, dW, db = linear_backward(dZ, linear_cache)\r\n","    \r\n","    return dA_prev, dW, db"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tbTH3WBHEN34"},"source":["## Backpropagation for L Layers"]},{"cell_type":"code","metadata":{"id":"PSdLPfMtDN3p"},"source":["#The one backward pass\r\n","def L_model_backward(AL, Y, caches):\r\n","    \"\"\"\r\n","    Implement the backward propagation for the [LINEAR->RELU] * (L-1) -> LINEAR -> SIGMOID group\r\n","    \r\n","    Arguments:\r\n","    AL -- probability vector, output of the forward propagation (L_model_forward())\r\n","    Y -- true \"label\" vector (containing 0 if non-cat, 1 if cat)\r\n","    caches -- list of caches containing:\r\n","                every cache of linear_activation_forward() with \"relu\" (there are (L-1) or them, indexes from 0 to L-2)\r\n","                the cache of linear_activation_forward() with \"sigmoid\" (there is one, index L-1)\r\n","    \r\n","    Returns:\r\n","    grads -- A dictionary with the gradients\r\n","             grads[\"dA\" + str(l)] = ... \r\n","             grads[\"dW\" + str(l)] = ...\r\n","             grads[\"db\" + str(l)] = ... \r\n","    \"\"\"\r\n","    grads = {}\r\n","    L = len(caches) \r\n","    m = AL.shape[1]\r\n","    Y = Y.reshape(AL.shape) \r\n","    \r\n","    \r\n","    dAL = - (np.divide(Y, AL) - np.divide(1 - Y, 1 - AL))\r\n","    \r\n","    # Lth layer (SIGMOID -> LINEAR) gradients. Inputs: \"AL, Y, caches\". Outputs: \"grads[\"dAL\"], grads[\"dWL\"], grads[\"dbL\"]\r\n","    current_cache = caches[L-1]\r\n","    grads[\"dA\" + str(L-1)], grads[\"dW\" + str(L)], grads[\"db\" + str(L)] = linear_activation_backward(dAL, current_cache, activation = \"sigmoid\")\r\n","    \r\n","    for l in reversed(range(L-1)):\r\n","        current_cache = caches[l]\r\n","        dA_prev_temp, dW_temp, db_temp = linear_activation_backward(grads[\"dA\" + str(l + 1)], current_cache, activation = \"relu\")\r\n","        grads[\"dA\" + str(l)] = dA_prev_temp\r\n","        grads[\"dW\" + str(l + 1)] = dW_temp\r\n","        grads[\"db\" + str(l + 1)] = db_temp\r\n","\r\n","    return grads"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ggY3HPzaa86B"},"source":["?? linear_activation_backward"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dDASgUg5bogv"},"source":["?? linear_backward"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DmsLNZIxEDXZ"},"source":["## Compute the cost function "]},{"cell_type":"code","metadata":{"id":"MX9AW319DDpp"},"source":["#Here's the cost function\r\n","def compute_cost(AL, Y):\r\n","    \"\"\"\r\n","    Implement the cost function\r\n","\r\n","    Arguments:\r\n","    AL -- probability vector corresponding to your label predictions, shape (1, number of examples)\r\n","    Y -- true \"label\" vector (for example: containing 0 if non-cat, 1 if cat), shape (1, number of examples)\r\n","\r\n","    Returns:\r\n","    cost -- cross-entropy cost\r\n","    \"\"\"\r\n","    \r\n","    m = Y.shape[1]\r\n","\r\n","    # Compute loss from aL and y.\r\n","    cost = (1./m) * (-np.dot(Y,np.log(AL).T) - np.dot(1-Y, np.log(1-AL).T))\r\n","    \r\n","    cost = np.squeeze(cost)      # To make sure your cost's shape is what we expect (e.g. this turns [[17]] into 17).\r\n","    assert(cost.shape == ())\r\n","    \r\n","    return cost"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"duDiiThyEcrY"},"source":["## Prediction"]},{"cell_type":"code","metadata":{"id":"q-ClwYHaDQYi"},"source":["def predict(X, y, parameters):\r\n","    \"\"\"\r\n","    This function is used to predict the results of a  L-layer neural network.\r\n","    \r\n","    Arguments:\r\n","    X -- data set of examples you would like to label\r\n","    parameters -- parameters of the trained model\r\n","    \r\n","    Returns:\r\n","    p -- predictions for the given dataset X\r\n","    \"\"\"\r\n","    \r\n","    m = X.shape[1]\r\n","    n = len(parameters) // 2 # number of layers in the neural network\r\n","    p = np.zeros((1,m))\r\n","    \r\n","    # Forward propagation\r\n","    probas, caches = L_model_forward(X, parameters)\r\n","\r\n","    \r\n","    # convert probas to 0/1 predictions\r\n","    for i in range(0, probas.shape[1]):\r\n","        if probas[0,i] > 0.5:\r\n","            p[0,i] = 1\r\n","        else:\r\n","            p[0,i] = 0\r\n","    \r\n","    #print results\r\n","    #print (\"predictions: \" + str(p))\r\n","    #print (\"true labels: \" + str(y))\r\n","    print(\"Accuracy: \"  + str(np.sum((p == y)/m)))\r\n","        \r\n","    return p"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BbZipxQWHNKC"},"source":["# Updation"]},{"cell_type":"markdown","metadata":{"id":"NZsZgmrGHNKD"},"source":["Updating the parameters using gradient descent"]},{"cell_type":"code","metadata":{"id":"FEjPygymHNKE"},"source":["def update_parameters(parameters, grads, learning_rate):\n","    \"\"\"\n","    Update parameters using gradient descent\n","    \n","    Arguments:\n","    parameters -- python dictionary containing your parameters \n","    grads -- python dictionary containing your gradients, output of L_model_backward\n","    \n","    Returns:\n","    parameters -- python dictionary containing your updated parameters \n","                  parameters[\"W\" + str(l)] = ... \n","                  parameters[\"b\" + str(l)] = ...\n","    \"\"\"\n","    \n","    L = len(parameters) // 2 # number of layers in the neural network\n","\n","    # Update rule for each parameter. Use a for loop.\n","    for l in range(L):\n","        parameters[\"W\" + str(l+1)] = parameters[\"W\" + str(l+1)] - learning_rate * grads[\"dW\" + str(l+1)]\n","        parameters[\"b\" + str(l+1)] = parameters[\"b\" + str(l+1)] - learning_rate * grads[\"db\" + str(l+1)]\n","        \n","    return parameters"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yxg9V-vnU_er"},"source":["# Loading The Data "]},{"cell_type":"code","metadata":{"id":"jQQEVi31U-rq"},"source":["train_x_orig, train_y, test_x_orig, test_y, classes = load_data()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PTjqinQCUnDF"},"source":["# Visualizing the data <br>\r\n","Run the cell below to see what does the data look like"]},{"cell_type":"code","metadata":{"id":"npVtfSkmU1Za","colab":{"base_uri":"https://localhost:8080/","height":286},"executionInfo":{"status":"ok","timestamp":1610032569630,"user_tz":-330,"elapsed":1118,"user":{"displayName":"Siddhi Vinayak Tripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Uizs5aJxGEFpmAyQgkLTkobTJ4qotzvQmYYdnw=s64","userId":"14392076445379840955"}},"outputId":"4cbf5a36-891f-4bed-8d56-ceb3025e8055"},"source":["index = 11\r\n","plt.imshow(train_x_orig[index])\r\n","print (\"y = \" + str(train_y[0, index]) + \". It's a \" + classes[train_y[0, index]].decode(\"utf-8\") + \" picture.\")"],"execution_count":25,"outputs":[{"output_type":"stream","text":["y = 1. It's a cat picture.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZkNjd7eBHNKF"},"source":["# Resizing\n","This is where you resize your dataset to correct shapes."]},{"cell_type":"code","metadata":{"id":"zNqE7xk1HNKF"},"source":["\n","m_train = train_x_orig.shape[0]\n","num_px = train_x_orig.shape[1]\n","m_test = test_x_orig.shape[0]\n","\n","train_x_flatten = train_x_orig.reshape(train_x_orig.shape[0], -1).T   # The \"-1\" makes reshape flatten the remaining dimensions\n","test_x_flatten = test_x_orig.reshape(test_x_orig.shape[0], -1).T\n","\n","# Standardize data to have feature values between 0 and 1.\n","train_x = train_x_flatten/255.\n","test_x = test_x_flatten/255."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HtdcpuIkHNKF"},"source":["# Change your model's dimensions here.\r\n","\r\n","The deeper the network more robust it is.\r\n","Although deeper networks take longer time to train and also face the problem of vanishing gradients"]},{"cell_type":"code","metadata":{"id":"8XvOiBgaHNKF"},"source":["layers_dims = [12288, 13, 7, 5, 1]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bBSGWM68HNKG"},"source":["# Here' s the L layered model.\n","Size L is the lenghth of the list layers_dims"]},{"cell_type":"code","metadata":{"id":"H-VyLyekHNKG"},"source":["def L_layer_model(X, Y, layers_dims, learning_rate = 0.0070, num_iterations = 3000, print_cost=False):#lr was 0.009\n","    \"\"\"\n","    Implements a L-layer neural network: [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID.\n","    \n","    Arguments:\n","    X -- data, numpy array of shape (number of examples, num_px * num_px * 3)\n","    Y -- true \"label\" vector (containing 0 if cat, 1 if non-cat), of shape (1, number of examples)\n","    layers_dims -- list containing the input size and each layer size, of length (number of layers + 1).\n","    learning_rate -- learning rate of the gradient descent update rule\n","    num_iterations -- number of iterations of the optimization loop\n","    print_cost -- if True, it prints the cost every 100 steps\n","    \n","    Returns:\n","    parameters -- parameters learnt by the model. They can then be used to predict.\n","    \"\"\"\n","\n","    np.random.seed(1)\n","    costs = []                         # keeps track of cost\n","    \n","    parameters = initialize_parameters_deep(layers_dims)\n","    \n","    # Loop (gradient descent)\n","    for i in range(0, num_iterations):\n","\n","        # Forward propagation: [LINEAR -> RELU]*(L-1) -> LINEAR -> SIGMOID.\n","        AL, caches = L_model_forward(X, parameters)\n","        \n","        # Compute cost.\n","        cost = compute_cost(AL, Y)\n","    \n","        # Backward propagation.\n","        grads = L_model_backward(AL, Y, caches)\n"," \n","        # Update parameters.\n","        parameters = update_parameters(parameters, grads, learning_rate)\n","                \n","        # Print the cost every 100 training example\n","        if print_cost and i % 100 == 0:\n","            print (\"Cost after iteration %i: %f\" %(i, cost))\n","        if print_cost and i % 100 == 0:\n","            costs.append(cost)\n","            \n","    # plot the cost\n","    plt.plot(np.squeeze(costs))\n","    plt.ylabel('cost')\n","    plt.xlabel('iterations (per hundreds)')\n","    plt.title(\"Learning rate =\" + str(learning_rate))\n","    plt.show()\n","    \n","    return parameters"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nuB7ewZpHNKG"},"source":["Run the cell below to start training your model. <br>\n","Feel free to play around with learning_rate and num_iterations."]},{"cell_type":"code","metadata":{"scrolled":true,"id":"5S9xbc12HNKI","colab":{"base_uri":"https://localhost:8080/","height":480},"executionInfo":{"status":"ok","timestamp":1610016217958,"user_tz":-330,"elapsed":27455,"user":{"displayName":"Siddhi Vinayak Tripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Uizs5aJxGEFpmAyQgkLTkobTJ4qotzvQmYYdnw=s64","userId":"14392076445379840955"}},"outputId":"4cf89683-8f0d-4620-9e69-a6096aa34d03"},"source":["parameters = L_layer_model(train_x, train_y, layers_dims, num_iterations = 1000, print_cost = True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Cost after iteration 0: 0.712299\n","Cost after iteration 100: 0.537436\n","Cost after iteration 200: 0.461346\n","Cost after iteration 300: 0.395135\n","Cost after iteration 400: 0.330914\n","Cost after iteration 500: 0.262872\n","Cost after iteration 600: 0.212586\n","Cost after iteration 700: 0.099947\n","Cost after iteration 800: 0.054386\n","Cost after iteration 900: 0.034106\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"WKTCfwApHNKI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610016238365,"user_tz":-330,"elapsed":2425,"user":{"displayName":"Siddhi Vinayak Tripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Uizs5aJxGEFpmAyQgkLTkobTJ4qotzvQmYYdnw=s64","userId":"14392076445379840955"}},"outputId":"8119bb1f-450a-4611-aaa9-43c5af0e823e"},"source":["pred_train = predict(train_x, train_y, parameters)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 0.9999999999999998\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9GsWFAytHNKJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1610016251164,"user_tz":-330,"elapsed":2274,"user":{"displayName":"Siddhi Vinayak Tripathi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh6Uizs5aJxGEFpmAyQgkLTkobTJ4qotzvQmYYdnw=s64","userId":"14392076445379840955"}},"outputId":"97177e8a-acdd-4619-c4d3-2a7ddc7a81c5"},"source":["pred_test = predict(test_x, test_y, parameters)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 0.8\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"H96vbRVQHNKJ"},"source":["It is clear that this model is overfitting. <br>\n","The train accuracy is almost 99% and the test accuracy is 80%. <br>\n","To avoid overfitting we can apply the technique of regularization.<br>\n","We will discuss this later in the course<br>"]},{"cell_type":"code","metadata":{"id":"1mbQltafc0zf"},"source":["?? predict"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lR95ioRNHNKJ"},"source":["# Test for a custom Image\r\n","\r\n","Run the cell below to upload a file from your local machine"]},{"cell_type":"code","metadata":{"id":"wwZ5K1ckJ58E"},"source":["from google.colab import files\r\n","uploaded = files.upload()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HwXKfFJLKl0y"},"source":["Here we reshape the size of your image such that the dimensions match."]},{"cell_type":"code","metadata":{"id":"N2ivncCIHNKJ"},"source":["my_image = \"index.jpg\" # change this to the name of your image file \n","my_label_y = [1] # the true class of your image (1 -> cat, 0 -> non-cat)\n","\n","fname = \"images/\" + my_image\n","image = np.array(ndimage.imread(fname, flatten=False))\n","my_image = scipy.misc.imresize(image, size=(num_px,num_px)).reshape((num_px*num_px*3,1))\n","my_image = my_image/255.\n","my_predicted_image = predict(my_image, my_label_y, parameters)\n","\n","plt.imshow(image)\n","print (\"y = \" + str(np.squeeze(my_predicted_image)) + \", your L-layer model predicts a \\\"\" + classes[int(np.squeeze(my_predicted_image)),].decode(\"utf-8\") +  \"\\\" picture.\")"],"execution_count":null,"outputs":[]}]}